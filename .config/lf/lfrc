set ratios 1:2:3
set cleaner ~/.config/lf/cleaner
set previewer ~/.config/lf/preview
set ignorecase true
map <enter> shell

map m
map "'"
map '"'
map d
map c

# https://github.com/salman-abedin/devour
# this program is used a lot here since it is
# a dead simple implementation of swallowing

cmd gallery ${{
	devour iv -t .
}}

# cmd dragon ${{
# 	dragon $fx
# }}

# https://github.com/BrodieRobertson/dotfiles/blob/master/config/lf/lfrc
cmd dragon %dragon -a -x "$fx"
cmd dragon-stay %dragon -a "$fx"
cmd dragon-individual %dragon "$fx"

cmd open ${{
	case $(file --mime-type  "$f"  -b) in
	# application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) localc $fx ;;
	# image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) zathura $fx >/dev/null 2>&1 ;;
    #     text/*|application/json|inode/x-empty) $EDITOR $fx;;
	# image/x-xcf) gimp "$f" >/dev/null 2>&1 ;;
	# image/svg+xml) display -- "$f" ;;
	# image/*) rotdir "$f" | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
	# 	sxiv -aio 2>/dev/null | while read -r file; do
	# 		[ -z "$file" ] && continue
	# 		lf -remote "send select \"$file\""
	# 		lf -remote "send toggle"
	# 	done &
	# 	;;
	audio/*) devour mpv "$f" ;;
	video/*) devour mpv "$f" -quiet >/dev/null 2>&1 ;;
	# application/pdf|application/vnd*|application/epub*) zathura $fx >/dev/null 2>&1 ;;
	# application/pgp-encrypted) $EDITOR $fx ;;
    #     *) for f in $fx; do $OPENER "$f" >/dev/null 2>&1; done;;

	application/pdf|application/vnd*|application/epub*) devour zathura  "$f"  ;;
	image/vnd.djvu|application/pdf|application/octet-stream|application/postscript) devour zathura  "$f"  ;;

	image/*) devour iv "$f"

    esac
}}

cmd unarchive ${{
  mkdir "${f%.*}"
  case "$f" in
      *.zip) unzip "$f" -d "${f%.*}";;
      *.tar.gz) tar -xzvf "$f" -C "${f%.*}";;
      *.tar.bz2) tar -xjvf "$f" -C "${f%.*}";;
      *.tar.xz) tar -xvf "$f" -C "${f%.*}";;
      *.tar) tar -xvf "$f" -C "${f%.*}";;
	  *.rar | *.7z) 7z x "$f" -o"${f%.*}" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd fzf_jump ${{
    # res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
	res="$(ag --hidden --ignore .git --ignore .cache -l -g '' | fzf)"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

# cmd fzf_dir_jump ${{
#     # res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
# 	res="$(ag --hidden --ignore .git -l -g '' | fzf)"
#     if [ -d "$res" ] ; then
#         cmd="cd"
#     elif [ -f "$res" ] ; then
#         cmd="select"
#     else
#         exit 0
#     fi
#     lf -remote "send $id $cmd \"$res\""
# }}

# basic stuff
map x cut
map D delete
map u unselect
map R reload
map P gallery 
map l open
map au unarchive
# i know that there is v key that can do the same
# but it is actually inverting the selection
map <c-space> glob-select *
map as calcdirsize
# binds for dragon
map dd dragon
map di dragon-individual
map ds dragon-stay
# cd into frequently used directories
map cD cd ~/Downloads
map cw cd ~/pics/wallpapers
map cs cd ~/.steam/steam
map cc cd ~/.config
map cb cd ~/.config/bspwm
map cf cd ~/.config/lf
map ch cd ~
# map <c-f> :fzf_jump
map o fzf_jump
map o fzf_jump
map C clear
